# This workflow installs the latest version of Terraform CLI
# On pull request events, this workflow will run `terraform init`, `terraform fmt`, and `terraform plan`. 
# On push events to the "master" branch, `terraform apply` will be executed.

name: 'Terraform'

on:
  push:
    branches: [ "develop" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: Terraform Workflow
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout Code
      uses: actions/checkout@v3

    # Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.5 # Replace with your Terraform version
        # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }} # Optional if using Terraform Cloud

    # Azure Login
    - name: Login to Azure
      uses: azure/login@v2
      with:
        auth-type: IDENTITY
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true

    # Terraform Init
    - name: Terraform Init
      run: terraform init -backend-config="storage_account_name=terraformstate4develop" \
                          -backend-config="container_name=tfstate" \
                          -backend-config="key=terraform.tfstate" \
                          -backend-config="access_key=${{ secrets.TF_STORAGE_KEY }}"

    # Terraform Plan
    - name: Terraform Plan
      run: terraform plan -out=tfplan -var "client_id=${{ secrets.AZURE_CLIENT_ID }}" \
                          -var "client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
                          -var "tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
                          -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

    # Terraform Apply
    - name: Terraform Apply
      if: github.event_name == 'push'
      run: terraform apply -auto-approve tfplan
